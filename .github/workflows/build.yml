name: Build

on: workflow_dispatch

jobs:
  linux-arm:
    runs-on: ubuntu-latest
    name: Build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 'stable'
        check-latest: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Clone Repo
      run: |
        export LATEST_APP=$(wget -qO- https://api.github.com/repos/usememos/memos/tags | gawk -F '["v]' '/name/{print "v"$5;exit}')
        git clone -b $LATEST_APP https://github.com/usememos/memos
        npm install -g pnpm

    - name: Build Frontend
      run: |
        cd memos/web
        corepack enable && pnpm i --frozen-lockfile
        pnpm build
        mkdir -p ../artifact
        cp -R dist ../artifact/dist
        rm -rf ../server/router/frontend/dist
        mkdir -p ../server/router/frontend/dist
        mv -f dist ../server/router/frontend/dist
        cd ../..

    - name: Build binaries for arm
      run: |
        cd memos
        rm -rf .git/
        muslflags="--extldflags '-static -fpic'"
        BASE="https://musl.cc/"
        FILES=(arm-linux-musleabi-cross arm-linux-musleabihf-cross armel-linux-musleabi-cross armel-linux-musleabihf-cross armv5l-linux-musleabi-cross armv5l-linux-musleabihf-cross armv6-linux-musleabi-cross armv6-linux-musleabihf-cross armv7l-linux-musleabihf-cross armv7m-linux-musleabi-cross armv7r-linux-musleabihf-cross)
        for i in "${FILES[@]}"; do
          url="${BASE}${i}.tgz"
          curl -L -o "${i}.tgz" "${url}"
          sudo tar xf "${i}.tgz" --strip-components 1 -C /usr/local
          rm -f "${i}.tgz"
        done
        OS_ARCHES=(linux-musleabi-arm linux-musleabihf-arm linux-musleabi-armel linux-musleabihf-armel linux-musleabi-armv5l linux-musleabihf-armv5l linux-musleabi-armv6 linux-musleabihf-armv6 linux-musleabihf-armv7l linux-musleabi-armv7m linux-musleabihf-armv7r)
        CGO_ARGS=(arm-linux-musleabi-gcc arm-linux-musleabihf-gcc armel-linux-musleabi-gcc armel-linux-musleabihf-gcc armv5l-linux-musleabi-gcc armv5l-linux-musleabihf-gcc armv6-linux-musleabi-gcc armv6-linux-musleabihf-gcc armv7l-linux-musleabihf-gcc armv7m-linux-musleabi-gcc armv7r-linux-musleabihf-gcc)
        GOARMS=('' '' '' '' '5' '5' '6' '6' '7' '7' '7')
        for i in "${!OS_ARCHES[@]}"; do
          os_arch=${OS_ARCHES[$i]}
          cgo_cc=${CGO_ARGS[$i]}
          arm=${GOARMS[$i]}
          echo building for ${os_arch}
          export GOOS=linux
          export GOARCH=arm
          export CC=${cgo_cc}
          export CGO_ENABLED=1
          export GOARM=${arm}
          go build -o memos -a -ldflags="-s -w $muslflags" -tags=jsoniter .
          rm -f artifact/memos && cp memos artifact/memos && cd artifact && tar -czvf ../memos-$os_arch.tar.gz * && cd ..
        done

    - name: Upload artifact
      uses: actions/upload-artifact@main
      with:
        name: memos-pre-built-arm.zip
        path: |
            memos/memos-linux-musleabi-arm.tar.gz
            memos/memos-linux-musleabihf-arm.tar.gz
            memos/memos-linux-musleabi-armel.tar.gz
            memos/memos-linux-musleabihf-armel.tar.gz
            memos/memos-linux-musleabihf-armel.tar.gz
            memos/memos-linux-musleabi-armv5l.tar.gz
            memos/memos-linux-musleabihf-armv5l.tar.gz
            memos/memos-linux-musleabi-armv6.tar.gz
            memos/memos-linux-musleabihf-armv6.tar.gz
            memos/memos-linux-musleabihf-armv7l.tar.gz
            memos/memos-linux-musleabi-armv7m.tar.gz
            memos/memos-linux-musleabihf-armv7r.tar.gz
            
    - name: Generate release tag
      id: tag
      run: echo "release_tag=$(wget -qO- https://api.github.com/repos/usememos/memos/tags | gawk -F '["v]' '/name/{print "v"$5;exit}')" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: |
            memos/memos-linux-musleabi-arm.tar.gz
            memos/memos-linux-musleabihf-arm.tar.gz
            memos/memos-linux-musleabi-armel.tar.gz
            memos/memos-linux-musleabihf-armel.tar.gz
            memos/memos-linux-musleabihf-armel.tar.gz
            memos/memos-linux-musleabi-armv5l.tar.gz
            memos/memos-linux-musleabihf-armv5l.tar.gz
            memos/memos-linux-musleabi-armv6.tar.gz
            memos/memos-linux-musleabihf-armv6.tar.gz
            memos/memos-linux-musleabihf-armv7l.tar.gz
            memos/memos-linux-musleabi-armv7m.tar.gz
            memos/memos-linux-musleabihf-armv7r.tar.gz

  main:
    runs-on: ubuntu-latest
    name: Build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 'stable'
        check-latest: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Clone Repo
      run: |
        export LATEST_APP=$(wget -qO- https://api.github.com/repos/usememos/memos/tags | gawk -F '["v]' '/name/{print "v"$5;exit}')
        git clone -b $LATEST_APP https://github.com/usememos/memos
        npm install -g pnpm

    - name: Build Frontend
      run: |
        cd memos/web
        corepack enable && pnpm i --frozen-lockfile
        pnpm build
        mkdir -p ../artifact
        cp -R dist ../artifact/dist
        rm -rf ../server/router/frontend/dist
        mkdir -p ../server/router/frontend/dist
        mv -f dist ../server/router/frontend/dist
        cd ../..

    - name: Build binaries
      run: |
        muslflags="--extldflags '-static -fpic'"
        BASE="https://musl.cc/"
        FILES=(x86_64-linux-musl-cross aarch64-linux-musl-cross mips-linux-musl-cross mips64-linux-musl-cross mips64el-linux-musl-cross mipsel-linux-musl-cross powerpc64le-linux-musl-cross s390x-linux-musl-cross)
        for i in "${FILES[@]}"; do
          url="${BASE}${i}.tgz"
          curl -L -o "${i}.tgz" "${url}"
          sudo tar xf "${i}.tgz" --strip-components 1 -C /usr/local
          rm -f "${i}.tgz"
        done
        OS_ARCHES=(linux-musl-amd64 linux-musl-arm64 linux-musl-mips linux-musl-mips64 linux-musl-mips64le linux-musl-mipsle linux-musl-ppc64le linux-musl-s390x)
        CGO_ARGS=(x86_64-linux-musl-gcc aarch64-linux-musl-gcc mips-linux-musl-gcc mips64-linux-musl-gcc mips64el-linux-musl-gcc mipsel-linux-musl-gcc powerpc64le-linux-musl-gcc s390x-linux-musl-gcc)
        for i in "${!OS_ARCHES[@]}"; do
          os_arch=${OS_ARCHES[$i]}
          cgo_cc=${CGO_ARGS[$i]}
          echo building for ${os_arch}
          export GOOS=${os_arch%%-*}
          export GOARCH=${os_arch##*-}
          export CC=${cgo_cc}
          export CGO_ENABLED=1
          go build -o memos -a -ldflags="-s -w $muslflags" -tags=jsoniter .
          rm -f artifact/memos && cp memos artifact/memos && cd artifact && tar -czvf ../memos-$os_arch.tar.gz * && cd ..
        done
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o memos ./bin/memos/main.go && rm -f artifact/memos && cp memos artifact/memos && cd artifact && tar -czvf ../memos-windows-amd64.tar.gz * && cd ..
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o memos ./bin/memos/main.go && rm -f artifact/memos && cp memos artifact/memos && cd artifact && tar -czvf ../memos-darwin-amd64.tar.gz * && cd ..

    - name: Upload artifact
      uses: actions/upload-artifact@main
      with:
        name: memos-pre-built-main.zip
        path: |
            memos/memos-linux-musl-amd64.tar.gz
            memos/memos-linux-musl-arm64.tar.gz
            memos/memos-linux-musl-mips.tar.gz
            memos/memos-linux-musl-mips64.tar.gz
            memos/memos-linux-musl-mips64le.tar.gz
            memos/memos-linux-musl-mipsle.tar.gz
            memos/memos-linux-musl-ppc64le.tar.gz
            memos/memos-linux-musl-s390x.tar.gz
            memos/memos-windows-amd64.tar.gz
            memos/memos-darwin-amd64.tar.gz

    - name: Generate release tag
      id: tag
      run: echo "release_tag=$(wget -qO- https://api.github.com/repos/usememos/memos/tags | gawk -F '["v]' '/name/{print "v"$5;exit}')" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: |
            memos/memos-linux-musl-amd64.tar.gz
            memos/memos-linux-musl-arm64.tar.gz
            memos/memos-linux-musl-mips.tar.gz
            memos/memos-linux-musl-mips64.tar.gz
            memos/memos-linux-musl-mips64le.tar.gz
            memos/memos-linux-musl-mipsle.tar.gz
            memos/memos-linux-musl-ppc64le.tar.gz
            memos/memos-linux-musl-s390x.tar.gz
            memos/memos-windows-amd64.tar.gz
            memos/memos-darwin-amd64.tar.gz
              
  freebsd:
    runs-on: ubuntu-latest
    name: Build 
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Clone Repo
      run: |
        export LATEST_APP=$(wget -qO- https://api.github.com/repos/usememos/memos/tags | gawk -F '["v]' '/name/{print "v"$5;exit}')
        git clone -b $LATEST_APP https://github.com/usememos/memos
        npm install -g pnpm

    - name: Build Frontend
      run: |
        cd memos/web
        corepack enable && pnpm i --frozen-lockfile
        pnpm build
        mkdir -p ../artifact
        cp -R dist ../artifact/dist
        rm -rf ../server/router/frontend/dist
        mkdir -p ../server/router/frontend/dist
        mv -f dist ../server/router/frontend/dist
        cd ../..

    - name: Build binaries
      uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        release: 13.2
        prepare: |
          pkg install -y wget curl git gcc bash gawk gsed
          wget https://dl.google.com/go/go1.22.0.freebsd-amd64.tar.gz && tar -C /usr/local -xzf go1.22.0.freebsd-amd64.tar.gz && rm go1.22.0.freebsd-amd64.tar.gz
          ln -s /usr/local/go/bin/go /usr/local/bin/go
        run: |
          cd memos
          GOOS=freebsd GOARCH=amd64 CC="cc" CXX="c++" AR="ar" CGO_LDFLAGS="-static" go build -o memos -a -ldflags "-s -w -extldflags '-static'" .
          cp memos artifact/memos && cd artifact && tar -czvf ../memos-freebsd-amd64.tar.gz * && cd ..

    - name: Upload artifact
      uses: actions/upload-artifact@main
      with:
        name: memos-pre-built-freebsd.zip
        path: |
            memos/memos-freebsd-amd64.tar.gz
            
    - name: Generate release tag
      id: tag
      run: echo "release_tag=$(wget -qO- https://api.github.com/repos/usememos/memos/tags | gawk -F '["v]' '/name/{print "v"$5;exit}')" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: |
            memos/memos-freebsd-amd64.tar.gz
              
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 8
